package com.aimage.domain.image.controller;

import com.aimage.domain.image.entity.Image;
import com.aimage.domain.image.repository.ImageRepository;
import com.aimage.domain.user.entity.User;
import com.aimage.web.exception.OpenAiException;
import com.theokanning.openai.image.CreateImageRequest;
import com.theokanning.openai.service.*;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Slf4j
@Controller
@RequiredArgsConstructor
public class ImageController {

    private final ImageRepository imageRepository;

    @Value("${openai-key}")
    private String OPENAI_KEY;

    @GetMapping("/generate")
    public String generateForm(@SessionAttribute(required = false) User loginUser,
                               @ModelAttribute Image image,
                               Model model) {

        return "features/generator";
    }

    @PostMapping("/generate")
    public String generate(@SessionAttribute(required = false) User loginUser,
                           @ModelAttribute Image image,
                           Model model) {

        String imageUrl = openAiImageUrl(image);
        image.setUrl(imageUrl);
        imageRepository.save(image);
        model.addAttribute("imageUrl", imageUrl);

        log.info("Image generated: {}", image);

        return "features/result";
    }

    /**
     *
     * @param imageToRequest Image details (prompt, size) to request for
     * @return An Image URL generated by OpenAI model.
     *
     * Library used: openai-java by Theo Kanning
     */
    private String openAiImageUrl(Image imageToRequest) {
        OpenAiService service = new OpenAiService(OPENAI_KEY);
        CreateImageRequest createImageRequest = CreateImageRequest.builder()
                .prompt(imageToRequest.getPrompt())
                .n(1)
                .size(imageToRequest.getSize())
                .build();

        String imgUrl = service.createImage(createImageRequest)
                .getData()
                .get(0)
                .getUrl();

        return imgUrl;
    }
}
