package com.aimage.domain.image.service;

import com.aimage.domain.image.dto.ImageDTO;
import com.aimage.domain.image.entity.Image;
import com.aimage.domain.image.repository.ImageRepository;
import com.theokanning.openai.OpenAiHttpException;
import com.theokanning.openai.image.CreateImageRequest;
import com.theokanning.openai.service.OpenAiService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class ImageServiceImpl implements ImageService {

    @Value("${openai-key}")
    private String OPENAI_KEY;

    private final ImageRepository imageRepository;

    @Override
    public void save(ImageDTO imageDTO, String imageURL) {
        Image image = Image.builder()
                .prompt(imageDTO.getPrompt())
                .size(imageDTO.getSize())
                .url(imageURL)
                .build();

        imageRepository.save(image);
    }

    /**
     * Library used: openai-java by Theo Kanning
     *
     * @param imageForm Image form which contains details (prompt, size) of an image to request for
     * @return An Image URL generated by OpenAI image model.
     * @throws OpenAiHttpException (RuntimeException) if there is any problem with API request
     */
    @Override
    public String requestImageToOpenAI(ImageDTO imageForm) throws OpenAiHttpException {
        OpenAiService service = new OpenAiService(OPENAI_KEY);
        CreateImageRequest createImageRequest = CreateImageRequest.builder()
                .prompt(imageForm.getPrompt())
                .n(1)
                .size(imageForm.getSize())
                .build();

        String imgUrl = service.createImage(createImageRequest)
                .getData()
                .get(0)
                .getUrl();

        return imgUrl;
    }

}
